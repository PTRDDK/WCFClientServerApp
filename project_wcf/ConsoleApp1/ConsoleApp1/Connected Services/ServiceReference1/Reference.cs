//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApp1.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Timetable", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1")]
    [System.SerializableAttribute()]
    public partial class Timetable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string endCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime endTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string startCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime startTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string endCity {
            get {
                return this.endCityField;
            }
            set {
                if ((object.ReferenceEquals(this.endCityField, value) != true)) {
                    this.endCityField = value;
                    this.RaisePropertyChanged("endCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime endTime {
            get {
                return this.endTimeField;
            }
            set {
                if ((this.endTimeField.Equals(value) != true)) {
                    this.endTimeField = value;
                    this.RaisePropertyChanged("endTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string startCity {
            get {
                return this.startCityField;
            }
            set {
                if ((object.ReferenceEquals(this.startCityField, value) != true)) {
                    this.startCityField = value;
                    this.RaisePropertyChanged("startCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime startTime {
            get {
                return this.startTimeField;
            }
            set {
                if ((this.startTimeField.Equals(value) != true)) {
                    this.startTimeField = value;
                    this.RaisePropertyChanged("startTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1")]
    [System.SerializableAttribute()]
    public partial class CityException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ThrowExceptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ThrowException {
            get {
                return this.ThrowExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ThrowExceptionField, value) != true)) {
                    this.ThrowExceptionField = value;
                    this.RaisePropertyChanged("ThrowException");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimetableCrossed", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1")]
    [System.SerializableAttribute()]
    public partial class TimetableCrossed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConsoleApp1.ServiceReference1.Timetable firstConnectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConsoleApp1.ServiceReference1.Timetable secondConnectionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConsoleApp1.ServiceReference1.Timetable firstConnection {
            get {
                return this.firstConnectionField;
            }
            set {
                if ((object.ReferenceEquals(this.firstConnectionField, value) != true)) {
                    this.firstConnectionField = value;
                    this.RaisePropertyChanged("firstConnection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConsoleApp1.ServiceReference1.Timetable secondConnection {
            get {
                return this.secondConnectionField;
            }
            set {
                if ((object.ReferenceEquals(this.secondConnectionField, value) != true)) {
                    this.secondConnectionField = value;
                    this.RaisePropertyChanged("secondConnection");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllConnections", ReplyAction="http://tempuri.org/IService1/getAllConnectionsResponse")]
        ConsoleApp1.ServiceReference1.Timetable[] getAllConnections();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllConnections", ReplyAction="http://tempuri.org/IService1/getAllConnectionsResponse")]
        System.Threading.Tasks.Task<ConsoleApp1.ServiceReference1.Timetable[]> getAllConnectionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addConnection", ReplyAction="http://tempuri.org/IService1/addConnectionResponse")]
        void addConnection(string startCity, System.DateTime startTime, string endCity, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addConnection", ReplyAction="http://tempuri.org/IService1/addConnectionResponse")]
        System.Threading.Tasks.Task addConnectionAsync(string startCity, System.DateTime startTime, string endCity, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllConnectionsFromCity", ReplyAction="http://tempuri.org/IService1/getAllConnectionsFromCityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ConsoleApp1.ServiceReference1.CityException), Action="http://tempuri.org/IService1/getAllConnectionsFromCityCityExceptionFault", Name="CityException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1")]
        ConsoleApp1.ServiceReference1.Timetable[] getAllConnectionsFromCity(string startCityName, string endCityName, System.DateTime currentTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllConnectionsFromCity", ReplyAction="http://tempuri.org/IService1/getAllConnectionsFromCityResponse")]
        System.Threading.Tasks.Task<ConsoleApp1.ServiceReference1.Timetable[]> getAllConnectionsFromCityAsync(string startCityName, string endCityName, System.DateTime currentTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllCrossedConnectionsFromCity", ReplyAction="http://tempuri.org/IService1/getAllCrossedConnectionsFromCityResponse")]
        ConsoleApp1.ServiceReference1.TimetableCrossed[] getAllCrossedConnectionsFromCity(string startCityName, string endCityName, System.DateTime currentTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllCrossedConnectionsFromCity", ReplyAction="http://tempuri.org/IService1/getAllCrossedConnectionsFromCityResponse")]
        System.Threading.Tasks.Task<ConsoleApp1.ServiceReference1.TimetableCrossed[]> getAllCrossedConnectionsFromCityAsync(string startCityName, string endCityName, System.DateTime currentTime);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ConsoleApp1.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ConsoleApp1.ServiceReference1.IService1>, ConsoleApp1.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConsoleApp1.ServiceReference1.Timetable[] getAllConnections() {
            return base.Channel.getAllConnections();
        }
        
        public System.Threading.Tasks.Task<ConsoleApp1.ServiceReference1.Timetable[]> getAllConnectionsAsync() {
            return base.Channel.getAllConnectionsAsync();
        }
        
        public void addConnection(string startCity, System.DateTime startTime, string endCity, System.DateTime endTime) {
            base.Channel.addConnection(startCity, startTime, endCity, endTime);
        }
        
        public System.Threading.Tasks.Task addConnectionAsync(string startCity, System.DateTime startTime, string endCity, System.DateTime endTime) {
            return base.Channel.addConnectionAsync(startCity, startTime, endCity, endTime);
        }
        
        public ConsoleApp1.ServiceReference1.Timetable[] getAllConnectionsFromCity(string startCityName, string endCityName, System.DateTime currentTime) {
            return base.Channel.getAllConnectionsFromCity(startCityName, endCityName, currentTime);
        }
        
        public System.Threading.Tasks.Task<ConsoleApp1.ServiceReference1.Timetable[]> getAllConnectionsFromCityAsync(string startCityName, string endCityName, System.DateTime currentTime) {
            return base.Channel.getAllConnectionsFromCityAsync(startCityName, endCityName, currentTime);
        }
        
        public ConsoleApp1.ServiceReference1.TimetableCrossed[] getAllCrossedConnectionsFromCity(string startCityName, string endCityName, System.DateTime currentTime) {
            return base.Channel.getAllCrossedConnectionsFromCity(startCityName, endCityName, currentTime);
        }
        
        public System.Threading.Tasks.Task<ConsoleApp1.ServiceReference1.TimetableCrossed[]> getAllCrossedConnectionsFromCityAsync(string startCityName, string endCityName, System.DateTime currentTime) {
            return base.Channel.getAllCrossedConnectionsFromCityAsync(startCityName, endCityName, currentTime);
        }
    }
}
